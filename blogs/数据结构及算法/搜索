# 搜索算法

## 顺序搜索

```javascript
this.sequentialSearch = function(item) {
    for (let i = 0; i < arr.length; i++) {
        if (item === arr[i]) {
            return i;
        }
    }
    return -1;
};
```

## 二分搜索

```javascript
//该算法要求被搜索的数据结构已经排序

//1.选择数组的中间值
//2.如果选中值是待搜索值，则算法执行完毕
//3.如果待搜索的值比选中值要小，则返回步骤1并在选中值左边的子数组中查找
//4.如果待搜索的值比选中的值要大，则返回步骤1并在选中值右边的子数组中寻找

//循环
function binarySearch(array, item) {
    //先排序
    this.quickSort();

    var low = 0,
        high = array.length - 1,
        mid,
        element;

    while (low <= high) {
        mid = ((low + high) / 2) | 0;
        element = array[mid];
        if (element < item) {
            low = mid + 1;
        } else if (element > item) {
            high = mid - 1;
        } else {
            return mid;
        }
    }
    return -1;
}

//递归
function binarySearch1(array, left, right, target) {
    if (left >= right) return -1;
    var mid = ((left + right) / 2) | 0;
    var value = array[mid];
    if (value === target) return mid;
    if (value > target) return binarySearch1(array, 0, mid - 1, target);
    if (value < target) return binarySearch1(array, mid + 1, right, target);
}
```
